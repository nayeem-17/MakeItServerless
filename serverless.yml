service: crud-service-demo
useDotenv: true
frameworkVersion: "2"
custom:
  tableName: "new-user-data"
# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  lambdaHashingVersion: 20201221
  environment:
    USERS_TABLE: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

plugins:
  - serverless-offline
functions:
  app:
    handler: app.handler
    events:
      - http: ANY /
  getUser:
    handler: app.handler
    events:
      - http: "GET /user/get/{proxy+}"
  createUser:
    handler: app.handler
    events:
      - http: "POST /user/create"
  updateUser:
    handler: app.handler
    events:
      - http: "PUT /user/update/{proxy+}"
  deleteUser:
    handler: app.handler
    events:
      - http: "DELETE /user/delete/{proxy+}"
